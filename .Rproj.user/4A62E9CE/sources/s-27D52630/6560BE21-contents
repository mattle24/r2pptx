#' @include slide.R
#' @include generics.R
NULL

#' Presentation
#'
#' An S4 class to represent a powerpoint presentation.
#' @slot name character. Name of the presentation.
#' @slot slides list. List of `R2PptxSlide` objects.
#' @slot template_path character. File path to the Powerpoint template used
#' for this presentation.
setClass(
  "R2PptxPresentation",
  slots = c(
    name = "character",
    slides = "list",
    template_path = "character"
  )
)

setValidity("R2PptxPresentation", function(object) {
  for (slide in slides) {
    if (!inherits(slide, "R2PptSlide")) {
      rlang::abort("Each slide must be a `R2PptxSlide` object")
    }
    validObject(slide)
  }
  if (!file.exists(object@template_path)) {
    glue::glue(
      "Template path must be valid file. File `{x}` not found.",
      x = object@template_path
    )
  } else {
    TRUE
  }
})


#' New Presentation
#'
#' Make a new `R2PptxPresentation`. Presentations represent powerpoint decks.
#' @param name character. Name of the presentation
#' @param template_path character. Path of the file that has the Powerpoint
#'   template to use.
#' @param slides list. Optional. List of slides to initiate the presentation
#'   with.
#' @export
new_presentation <- function(name, template_path, slides = list()) {
  if (class(slides) != "list") {
    slides <- list(slides)
  }
  new("R2PptxPresentation", name = name, template_path = template_path, slides = slides)
}


# show method
setMethod(
  "show",
  "R2PptxPresentation",
  function(object) {
    cat("Presentation named:", name(object),
        "\nwith", length(object), "slides.")
  }
)


# add slide -------------------------------------------------------------

setMethod(
  "append_slide",
  signature(e1 = "R2PptxPresentation", e2 = "R2PptxSlide"),
  function(e1, e2) {
    e1@slides <- append(e1@slides, e2)
    validObject(e1)
    e1
  }
)


setMethod(
  "+",
  signature = signature(e1 = "R2PptxPresentation", e2 = "R2PptxSlide"),
  function(e1, e2) {
    append_slide(e1, e2)
  }
)


# write pptx --------------------------------------------------------------

setMethod(
  "write_pptx",
  "R2PptxPresentation",
  function(x, path, ...) {
    pptx_obj <- officer::read_pptx(path = x@template_path)

    for (slide in x@slides) {
      pptx_obj <- officer::add_slide(pptx_obj,
                                     layout = slide@layout,
                                     master = pptx_obj$masterLayouts$names()[1])
      for (element in slide@elements) {
        # TODO this will be different if the location is a real location and
        # not a placeholder label. Very future TODO.
        pptx_obj <- officer::ph_with(
          pptx_obj,
          value = element@value,
          location = officer::ph_location_label(element@key@location)
        )
      }
    }
    print(pptx_obj, target = path)
    invisible(x)
  }
)


# length ------------------------------------------------------------------

setMethod("length", "R2PptxPresentation", function(x) length(x@slides))

# template path -----------------------------------------------------------

setGeneric("template_path", function(x) standardGeneric("template_path"))
setMethod("template_path", "R2PptxPresentation", function(x) {
  x@template_path
})

setGeneric("template_path<-", function(x, value) standardGeneric("template_path<-"))
setMethod("template_path<-", "R2PptxPresentation", function(x, value) {
  x@template_path <- value
  validObject(x)
  x
})
